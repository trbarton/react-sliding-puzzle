{"version":3,"sources":["Puzzle/Menu.js","Puzzle/Tile.js","Utils/LocalStorage.js","Puzzle/Game.js","PuzzleList.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","_templateObject","Menu","clickHandler","_this","props","restart","react_default","a","createElement","id","this","status","Link","to","className","winClass","onClick","Component","Tile","getBackgroundStyle","mapId","params","style","backgroundImage","concat","backgroundSize","backgroundPosition","won","e","tileClick","target","pos","getPuzzleData","puzzleNumber","puzzlesString","localStorage","getItem","JSON","parse","completed","best","setPuzzleData","numMoves","setItem","stringify","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffle","array","map","num","i","inversions","j","length","reduce","b","countInversions","temp","index","counter","Math","floor","random","fischerYates","tile","switchTiles","getInitialState","tiles","win","puzzleId","match","checkBoard","state","tileEl","position","console","log","moves","animateTiles","move","direction","classList","add","setTimeout","remove","afterAnimate","setState","bind","assertThisInitialized","restartGame","_this2","key","Tile_Tile","Menu_Menu","PuzzleListContainer","div","PuzzleList_templateObject","GridContainer","_templateObject2","PuzzleButton","_templateObject3","PuzzleList","numButtons","buttons","push","createButtonGrid","App","BrowserRouter","basename","process","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81744858.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport { Link } from \"react-router-dom\";\n\nconst Button = styled.button`\n  margin: 0 5px;\n  width: 92px;\n`;\n\nexport default class Menu extends Component {\n\n  clickHandler = () => {\n    this.props.restart();\n  }\n\n  render() {\n    return (\n      <div id=\"menu\">\n        <h3 id=\"subtitle\">{this.props.status}</h3>\n        <Link to=\"/\">\n          <Button className=\"button\">Menu</Button>\n        </Link>\n        <Button className={this.props.winClass} onClick={this.clickHandler}>Restart</Button>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class Tile extends Component {\n\n  getBackgroundStyle = () => {\n    const mapId = this.props.mapId.params.id;\n    const style = {\n      backgroundImage: `url('../images/${mapId}.png')`,\n      backgroundSize: '300px'\n    }\n\n    switch (this.props.status) {\n      case 1:\n        style.backgroundPosition = '0 0';\n        break;\n      case 2:\n        style.backgroundPosition = '-100px 0';\n        break;\n      case 3:\n        style.backgroundPosition = '-200px 0';\n        break;\n      case 4:\n        style.backgroundPosition = '0 -100px';\n        break;\n      case 5:\n        style.backgroundPosition = '-100px -100px';\n        break;\n      case 6:\n        style.backgroundPosition = '-200px -100px';\n        break;\n      case 7:\n        style.backgroundPosition = '0 -200px';\n        break;\n      case 8:\n        style.backgroundPosition = '-100px -200px';\n        break;\n      default:\n        if (this.props.won) {\n          style.backgroundPosition = '-200px -200px';\n        } else {\n          style.backgroundImage = '';\n        }\n    }\n    return style;\n  }\n\n  clickHandler = (e) => {\n    this.props.tileClick(e.target, this.props.pos, this.props.status);\n  }\n\n  render() {\n    return (\n      <div className=\"tile\" onClick={this.clickHandler} style={this.getBackgroundStyle()}>\n        {/* {this.props.status} */}\n      </div>\n    )\n  }\n}","\n// {\n//   \"completed\": false,\n//   \"best\": 6\n// }\n\nexport const getPuzzleData = (puzzleNumber) => {\n  const puzzlesString = localStorage.getItem(`puzzle-${puzzleNumber}`);\n  if (puzzlesString) {\n    return JSON.parse(puzzlesString);\n  }\n  return {\n    completed: false,\n    best: null\n  }\n}\n\nexport const setPuzzleData = (puzzleNumber, numMoves) => {\n  const puzzlesString = localStorage.getItem(`puzzle-${puzzleNumber}`);\n  if (puzzlesString) {\n    const puzzleData = JSON.parse(puzzlesString);\n    if (numMoves < puzzleData['best']) {\n      localStorage.setItem(\n        `puzzle-${puzzleNumber}`,\n        JSON.stringify({\n          completed: true,\n          best: numMoves\n        })\n      )\n    }\n  } else {\n    localStorage.setItem(\n      `puzzle-${puzzleNumber}`,\n      JSON.stringify({\n        completed: true,\n        best: numMoves\n      })\n    )\n  }\n}","import React, { Component } from 'react';\nimport Menu from './Menu';\nimport Tile from './Tile';\nimport { getPuzzleData, setPuzzleData } from '../Utils/LocalStorage';\n\nexport default class Game extends Component {\n\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = this.getInitialState();\n  }\n\n  shuffle = (array) => {\n\n    // switches first two tiles\n    function switchTiles(array) {\n      var i = 0;\n\n      // find the first two tiles in a row\n      while (!array[i] || !array[i + 1]) i++;\n\n      // store tile value\n      var tile = array[i];\n      // switche values\n      array[i] = array[i + 1];\n      array[i + 1] = tile;\n\n      return array;\n    }\n\n    // counts inversions\n    function countInversions(array) {\n      // make array of inversions\n      var invArray = array.map(function (num, i) {\n        var inversions = 0;\n        for (let j = i + 1; j < array.length; j++) {\n          if (array[j] && array[j] < num) {\n            inversions += 1;\n          }\n        }\n        return inversions;\n      });\n      // return sum of inversions array\n      return invArray.reduce(function (a, b) {\n        return a + b;\n      });\n    }\n\n    // fischer-yates shuffle algorithm\n    function fischerYates(array) {\n      var counter = array.length, temp, index;\n\n      // While there are elements in the array\n      while (counter > 0) {\n        // Pick a random index\n        index = Math.floor(Math.random() * counter);\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n      }\n\n      return array;\n    }\n\n    // Fischer-Yates shuffle\n    array = fischerYates(array);\n\n    // check for even number of inversions\n    if (countInversions(array) % 2 !== 0) {\n      // switch two tiles if odd\n      array = switchTiles(array);\n    }\n\n    return array;\n  }\n\n  getInitialState = () => {\n    return {\n      // initial state of game board\n      // tiles: [\n      //   1, 2, 3,\n      //   4, 5, 6,\n      //   7, 8, ''\n      // ],\n      tiles: this.shuffle([\n        1, 2, 3,\n        4, 5, 6,\n        7, 8, ''\n      ]),\n      win: false,\n      numMoves: 0,\n      puzzleId: this.props.match.params.id,\n      best: getPuzzleData(this.props.match.params.id).best\n    };\n  }\n\n  checkBoard = () => {\n    var tiles = this.state.tiles;\n\n    for (var i = 0; i < tiles.length - 1; i++) {\n      if (tiles[i] !== i + 1) return false;\n    }\n\n\n    return true;\n  }\n\n  tileClick = (tileEl, position, status) => {\n    console.log(`position: ${position}`);\n\n    var tiles = this.state.tiles;\n    // Possible moves\n    // [up,right,down,left]\n    // 9 = out of bounds\n    var moves = [\n      [null, 1, 3, null], [null, 2, 4, 0], [null, null, 5, 1],\n      [0, 4, 6, null], [1, 5, 7, 3], [2, null, 8, 4],\n      [3, 7, null, null], [4, 8, null, 6], [5, null, null, 7]\n    ];\n\n    function animateTiles(i, move) {\n      var directions = ['up', 'right', 'down', 'left'];\n      const direction = directions[i];\n      tileEl.classList.add('move-' + direction);\n      // this is all a little hackish.\n      // css/js are used together to create the illusion of moving blocks\n      setTimeout(function () {\n        // moveToEl.classList.add('highlight');\n        tileEl.classList.remove('move-' + direction);\n        // time horribly linked with css transition\n        setTimeout(function () {\n          // moveToEl.classList.remove('highlight');\n        }, 400);\n      }, 200);\n    }\n\n    // called after tile is fully moved\n    // sets new state\n    function afterAnimate() {\n      tiles[position] = '';\n      tiles[move] = status;\n      this.setState({\n        tiles: tiles,\n        moves: moves,\n        win: this.checkBoard(),\n        numMoves: this.state.numMoves + 1\n      });\n      if (this.state.win) {\n        setPuzzleData(this.state.puzzleId, this.state.numMoves);\n        if (this.state.best == null || this.state.numMoves < this.state.best) {\n          this.setState({best: this.state.numMoves});\n        }\n      }\n    };\n\n    // return if they've already won\n    if (this.state.win) return;\n\n    // check possible moves\n    for (var i = 0; i < moves[position].length; i++) {\n      var move = moves[position][i];\n      // if an adjacent tile is empty\n      if (typeof move === 'number' && !tiles[move]) {\n        animateTiles(i, move);\n        setTimeout(afterAnimate.bind(this), 200);\n        break;\n      }\n    }\n  }\n\n  restartGame = () => {\n    this.setState(this.getInitialState());\n  }\n\n  render() {\n    return [\n      <h1 key=\"title\" className=\"title\">Puzzle {this.state.puzzleId}</h1>,\n      <div key=\"game\">\n        <div id=\"game-board\">\n          {\n            this.state.tiles.map((tile, position) => {\n              return (\n                <Tile\n                  status={tile}\n                  key={tile}\n                  pos={position}\n                  tileClick={this.tileClick}\n                  won={this.state.win}\n                  mapId={this.props.match}\n                />\n              )\n            })\n          }\n        </div>\n        <h3 className=\"subtitle\">Moves: {this.state.numMoves}</h3>\n        <h3 className=\"subtitle\">Best: {this.state.best || '--'}</h3>\n        <Menu\n          winClass={this.state.win ? 'button win' : 'button'}\n          status={this.state.win ? 'You win!' : 'Solve the puzzle.'}\n          restart={this.restartGame}\n        />\n      </div>\n    ]\n  }\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from \"react-router-dom\";\nimport { getPuzzleData } from './Utils/LocalStorage';\n\nconst PuzzleListContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 80px);\n  grid-row-gap: 5px;\n  grid-column-gap: 5px;\n`\n\nconst PuzzleButton = styled.button`\n  width: 80px;\n  height: 80px;\n\n  &:hover {\n    background: rgba(72, 172, 222, 0.5)\n  }\n`\n\nconst numPuzzles = 21;\n\nconst createButtonGrid = (numButtons) => {\n  const buttons = [];\n  for (let i = 1; i <= numPuzzles; i++) {\n    buttons.push(\n      <Link to={`/puzzle/${i}`} key={i}>\n        <PuzzleButton className={getPuzzleData(i).completed ? 'button complete' : 'button'}>{i}</PuzzleButton>\n      </Link>\n    )\n  }\n  return buttons;\n}\n\nconst PuzzleList = () => [\n  <h1 key=\"title\" className=\"title\">Orienteering<br /> Slide Puzzle</h1>,\n  <PuzzleListContainer key=\"puzzleListContainer\">\n    <GridContainer>\n      {createButtonGrid()}\n    </GridContainer>\n  </PuzzleListContainer>\n];\n\nexport default PuzzleList;","import React, { Component } from 'react';\nimport Game from './Puzzle/Game';\nimport PuzzleList from './PuzzleList';\nimport './App.scss';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"game-wrapper\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <div>\n            <Route path=\"/\" exact component={PuzzleList} />\n            <Route path=\"/puzzle/:id?\" component={Game} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}